name: Publish Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          # The name of the owner and of the repository: owner/repository
          IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')

          if [[ $GITHUB_REF != refs/tags/v* ]]; then
            echo "Build aborted, invalid tag received from '$GITHUB_REF'" >&2
          	exit 1
          fi

          # Remove everything else than the tagged version
          VERSION=${GITHUB_REF#refs/tags/v}
          NAMED_VERSION="latest-unstable"

          # Tag as stable (:latest) if there is no letters in the version
          # Otherwise, tag as unstable (:latest-unstable)
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            NAMED_VERSION="latest"
          fi

          TAGS=$"
          ${IMAGE_NAME}:latest,\
          ${IMAGE_NAME}:${VERSION},\
          ghcr.io/${IMAGE_NAME}:latest,\
          ghcr.io/${IMAGE_NAME}:${VERSION}\
          "

          # Output the target tags
          echo ::set-output name=tags::${TAGS}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.CR_USERNAME }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and Push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
